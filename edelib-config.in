#!/bin/sh
# $Id$
#
# edelib configuration script
# Part of edelib.
#
# Original version by James Dean Palmer, adapted by Vincent Penne for fltk
# Modified for edelib from efltk-config

VERSION="@EDELIB_API_VERSION@"

# Calculate the prefix from the location of *this* file
prefix=`echo "$0" | sed 's/\/bin\/edelib-config//
s/\/edelib-config//'`

exec_prefix=${prefix}
exec_prefix_set=no
bindir=${exec_prefix}/bin
includedir=${prefix}/include
libdir=${exec_prefix}/lib
srcdir=.

# compiler names
CC="@CC@"
CXX="@CXX@"

# flags for C++ compiler:
CFLAGS="@CFLAGS@"
CXXFLAGS="@CXXFLAGS@"

LIBNAME="libedelib.a"
DSOLIBNAME="libedelib.so"
LIBNAMELINK="-ledelib"

# libraries
LDLIBS_EXTERN="@LDLIBS@"
SOUNDLIBS="@SOUNDLIBS@"
FLTKLIBS="@FLTKLIBS@"

LDLIBS="$LIBNAMELINK $FLTKLIBS $LDLIBS_EXTERN"
LDSTATIC="$libdir/$LIBNAME $FLTKLIBS $LDLIBS_EXTERN"
LIBS="$libdir/$LIBNAME"

usage() {
	echo "Usage: edelib-config [OPTIONS]
Options:
    [--prefix[=DIR]]  return/set where edelib is installed
    [--exec-prefix[=DIR]]
    [--version]

Options telling what to use:
    [--use-sound]     use sound libraries

Options telling what information we request:
    [--cflags]        return flags to compile C using edelib
    [--cxxflags]      return flags to compile C++ using edelib
    [--ldflags]       return flags to link against edelib
    [--ldstaticflags] return flags to link against static edelib library
                      even if there are DSOs installed
    [--libs]          return edelib libraries full path for dependencies

Options compiling and linking an application:
    [-g]              compile the program with debugging information
    [--compile program.cpp]
    [--output program] if output is not set, basename is used as output
"
	exit $1
}

if test $# -eq 0; then 
	usage 1
fi

compile=
debug=
output=

# Parse command line options
while test $# -gt 0 
do
  case "$1" in
  -*=*) optarg=`echo "$1" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
  *) optarg= ;;
  esac

  case $1 in
	--prefix=*)
	  prefix=$optarg
	  if test $exec_prefix_set = no ; then
		exec_prefix=$optarg
	  fi
	  ;;
	--prefix)
	  echo_prefix=yes
	  ;;
	--exec-prefix=*)
	  exec_prefix=$optarg
	  exec_prefix_set=yes
	  ;;
	--exec-prefix)
	  echo_exec_prefix=yes
	  ;;
	--version)
	  echo $VERSION
	  ;;
	--use-sound)
	  use_sound=yes
	  ;;
	--cflags)
	  echo_cflags=yes
	  ;;
	--cxxflags)
	  echo_cxxflags=yes
	  ;;
	--ldflags)
	  echo_ldflags=yes
	  ;;
	--ldstaticflags)
	  echo_ldstaticflags=yes
	  ;;
	--libs)
	  echo_libs=yes
	  ;;
	--compile)
	  compile=$2
	  shift
	  ;;
	-g)
	  debug=-g3
	  ;;
	--output)
	  output=$2
	  shift
	  ;;
	*)
	  echo_help=yes
	  ;;
  esac
  shift
done

# check if we need to append '-I' flag
if test "$includedir" != /usr/include; then
	includes=-I$includedir
else
	includes=
fi

# check if we need to append '-L' flag
if test "$libdir" != /usr/lib; then
	libraries=-L$libdir
else
	libraries=
fi

# Answer to user requests
if test -n "$echo_help"; then 
	usage 1
fi

if test -n "$compile"; then
	if test -n "$output"; then
	prog=$output
	else
	case $compile in
		*.cxx)
			prog=`basename $compile .cxx`
		;;
		*.cpp)
			prog=`basename $compile .cpp`
		;;
		*.cc)
			prog=`basename $compile .cc`
		;;
		*.C)
			prog=`basename $compile .C`
		;;
		*)
		echo "ERROR: Unknown/bad C++ source file extension on \"$compile\"!"
		exit 1
		;;
	esac
	fi
		
	post=$prog

	echo $CXX $includes $CXXFLAGS $debug -o $prog $compile $libraries $LDLIBS
	$CXX $includes $CXXFLAGS $debug -o $prog $compile $libraries $LDLIBS
fi

if test "$echo_prefix" = "yes"; then
	echo $prefix
fi

if test "$echo_exec_prefix" = "yes"; then
	echo $exec_prefix
fi

if test "$use_sound" = "yes"; then
	# reconstruct LDLIBS again because of linkage order
	LDLIBS="$LIBNAMELINK $SOUNDLIBS $FLTKLIBS $LDLIBS_EXTERN"
	LDSTATIC="$libdir/$LIBNAME $SOUNDLIBS $FLTKLIBS $LDLIBS_EXTERN"
fi

if test "$echo_cflags" = "yes"; then
	echo $includes $CFLAGS
fi

if test "$echo_cxxflags" = "yes"; then
	echo $includes $CXXFLAGS
fi

if test "$echo_ldflags" = "yes"; then
	  my_libs=
	  # append '-L' flag if we got call from subdir in srcdir
	  libdirs=-L$libdir

	  for i in $LDLIBS ; do
		if test $i != -L$libdir ; then
		  if test -z "$my_libs" ; then
			my_libs="$i"
		  else
			my_libs="$my_libs $i"
		  fi
		fi
	  done
	  echo $libdirs $my_libs
fi

if test "$echo_ldstaticflags" = "yes"; then
	  echo $LDSTATIC
fi

if test "$echo_libs" = "yes"; then
	  echo $LIBS
fi
