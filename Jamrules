#
# $Id$
#
# Part of edelib.
# Copyright (c) 2005-2007 EDE Authors.
#
# This program is licenced under terms of the 
# GNU General Public Licence version 2 or newer.
# See COPYING for details.

JAMCONFIG ?= $(TOP)/Jamconfig ;
include $(JAMCONFIG) ;

if ! $(JAMCONFIG_READ) {
	Exit "Can't find Jamconfig. Did you run 'configure' first ?" ;
}

if $(SHARED) = 1 {
	SUFOBJ_SHARED = ".lo" ;
	SUFLIB_SHARED = ".so" ;
	SUFLA_SHARED  = ".la" ;
}

# only for haiku jam
JCACHEFILE = $(TOP)/.jamcache ;
HCACHEFILE = $(TOP)/.jamhcache ;

# jam by default set 711 for executable files which is
# too restrictive disabling shell scripts to be excuted.
# Here I'm changing it to default used
EXEMODE = 755 ;

# these variables should be here (not in Jamconfig) since RMDIR
# is already defined as 'rm -f' in Jambase, and calling 'jam distclean'
# will revert it's value when we remove Jamconfig
RMDIR   = "rm -R" ;
COPYDIR = "cp -R" ;
LINKCMD = "ln -s" ;

# general flags we pull from Jamconfig, with addition of include
# directory search, so compiler can find edelib include directory
FLAGS  = $(ALLFLAGS) -I$(TOP) ;

# standard C++ library we link with; for now is gcc's default
STDLIB ?= stdc++ ;

# variables used by jam directly
# OPTIM is cleared so it don't collide with FLAGS
OPTIM    = ;
CCFLAGS  = $(FLAGS) ;
C++FLAGS = $(FLAGS) ;

# directories used to place final library and 
# by tests to construct correct paths
EDELIB_INCLUDEDIR = edelib ;
EDELIB_LIBDIR     = lib ;

# library names
EDELIB           = edelib ;
EDELIB_NAME      = libedelib ;
EDELIB_DBUS      = edelib_dbus ;
EDELIB_DBUS_NAME = libedelib_dbus ;

# directory name for installed documentation
EDELIB_DOCDIR      = "$(EDELIB)-$(EDELIB_VERSION)" ;

# Haiku jam have builtin LocalClean and LocalDepends
if ! $(INVOCATION_SUBDIR_SET) {
	rule LocalClean { Clean $(1) : $(2) ; }
	rule LocalDepends { Depends $(1) : $(2) ; }
}

# same as FDirName, but targeted to files
rule FFileName
{
	return [ FDirName $(<) ] ;
}

# Cleandir cleandir : <directory> ;
# Removes directory in 'Clean clean' fashion
actions piecemeal together existing Cleandir
{
	$(RMDIR) $(>)
}

# SymLink <link> : <source> ;
# Creates symbolic link <link> pointing at <source>.
rule SymLink
{
	if ! $(LINKCMD) {
		Echo "LINKCMD wasn't defined, $(<) will not be created" ;
		return ;
	}

	LocalDepends $(<) : $(>) ;
	SEARCH on $(<) = $(SEARCH_SOURCE) ;
	SymLink1 $(<) : $(>) ;
	Clean clean : $(<) ;
}

# LinkAgainst <target> : <libraries> ;
# The sam as jam's LinkLibraries, but will not mark those libraries 
# for building. <libraries> should be in form '-lfoo'
rule LinkAgainst
{
	LINKLIBS on $(1) = [ on $(1) return $(LINKLIBS) ] $(2) ;
}

# MakeLibrary <library> : <source> ;
# Create <library> and place it in $(EDELIB_LIBDIR). Library name should
# be in from 'libexample', without extension
rule MakeLibrary
{
	local path = [ FFileName $(TOP) $(EDELIB_LIBDIR) $(1) ] ;

	if $(SHARED) = 1 {
		SharedLibrary $(path) : $(2) ;
	} else {
		Library $(path) : $(2) ;
	}

	if $(3) != "noinstall" {
		if $(SHARED) = 1 {
			InstallSharedLibrary $(libdir) : $(path) ;
		} else {
			InstallStaticLibrary $(libdir) : $(path) ;
		}
	}
}

rule LibraryObjectCcFlags 
{
	if $(SHARED) = 1 {
		CCFLAGS on [ FGristFiles $(<:S=$(SUFOBJ_SHARED)) ] += $(>) ;
	} else {
		ObjectCcFlags $(<) : $(>) ;
	}
}

rule LibraryObjectC++Flags 
{
	if $(SHARED) = 1 {
		C++FLAGS on [ FGristFiles $(<:S=$(SUFOBJ_SHARED)) ] += $(>) ;
	} else {
		ObjectC++Flags $(<) : $(>) ;
	}
}

# SharedLibrary <library> : <source> ;
# Creates shared library with libtool
rule SharedLibrary
{
	if ! $(UNIX)  {
		Exit "Don't know how to build shared libraries on this platform" ;
	}

	SharedLibraryFromObjects $(<) : $(>:S=$(SUFOBJ_SHARED)) ;
	SharedObjects $(>) ;
}

rule SharedLibraryFromObjects
{
	local _i _l _l_so _l_la _s ;

	# Add grist to file names
	_s = [ FGristFiles $(>) ] ;
	_l = $(<:S=$(SUFLIB_SHARED).$(EDELIB_VERSION)) ;

	# for sonames; it accept only libname.so
	_l_so = $(<:S=$(SUFLIB_SHARED)) ;
	_l_so = $(_l_so:BSR=) ;

	# libname.la file
	_l_la = $(_l_so:S=$(SUFLA_SHARED)) ;

    # library depends on its member objects
	if $(KEEPOBJS) {
		LocalDepends obj : $(_s) ;
	} else {
		LocalDepends lib : $(_l) ;
	}

	# Set LOCATE for the library and its contents.  The bound
	# value shows up as $(NEEDLIBS) on the Link actions.
	# For compatibility, we only do this if the library doesn't
	# already have a path.

	if ! $(_l:D) {
		MakeLocate $(_l) : $(LOCATE_TARGET) ;
	}

	# we never scan shared libraries for member objects
	LocalDepends $(_l) : $(_s) ;

	# clean library
	Clean clean : $(_l) ;

	if $(OS) = "SOLARIS" {
		# solaris have other options for soname creation
		LINKFLAGS on $(_l) = -h $(_l_so) -G [ on $(_l) return $(LINKFLAGS) ] ;
	} else {
		# let linker knows we are making shared library by adding -shared and -Wl,-soname libname.so flags
		LINKFLAGS on $(_l) = -Wl,-soname,$(_l_so) -shared [ on $(_l) return $(LINKFLAGS) ] ;
	}

	# make it
	Link $(_l) : $(_s) ;

	# make a link
	SymLink $(_l_so) : $(_l) ;

	# let link be created in directory where libname.so.X.X.X exists
	MakeLocate $(_l_so) : $(_l:D) ;
	LocalDepends lib : $(_l_so) ;

	# generate libname.la file
	DLNAME1 on $(_l_la) = $(_l_so) ;
	DLNAME2 on $(_l_la) = $(_l:BSR=) ;
	GenLa $(_l_la) ;
	Clean clean : $(_l_la) ;

	# let libname.la be created in directory where libname.so.X.X.X exists
	MakeLocate $(_l_la) : $(_l:D) ;
	LocalDepends lib : $(_l_la) ;
}

rule SharedObjects
{
	# temporary replace SUFOBJ since Objects rule use it
	local SUFOBJ = $(SUFOBJ_SHARED) ;

	ObjectCcFlags $(<) : -fPIC ;
	ObjectC++Flags $(<) : -fPIC ;

	# call the normal Objects rule
	Objects $(<) ;
}

# MakeTest <bin> : <source> : <optional-addon-libs> : <option>
rule MakeTest
{
	local lpath ;

	lpath = [ FDirName $(TOP)/$(EDELIB_LIBDIR) ] ;

	Main $(1) : $(2) ;

	if $(SHARED) = 1 {
		if $(OS) = "SOLARIS" {
			# network libraries are in libxnet
			LinkAgainst $(1) : -lxnet ;
		}
	}

	if $(4) = "use-dbus" {
		if $(SHARED) = 1 { 
			LinkAgainst $(1) : -L$(lpath) -l$(EDELIB_DBUS) -l$(EDELIB) $(DBUSLIBS) ;
		} else {
			LinkAgainst $(1) : -L$(lpath) -l$(EDELIB_DBUS) -l$(EDELIB) ;
		}
	} else {
		LinkAgainst $(1) : -L$(lpath) -l$(EDELIB) ;
	}

	if $(3) {
		LinkAgainst $(1) : $(3) ;
	}

	LinkAgainst $(1) : -l$(STDLIB) ;
}

# MakeInstallPrivate <location-dir> : <targets> : <opt-file-mode> : <opt-chown> : <opt-chgrp> ;
rule MakeInstallPrivate
{
	local i t s ;
	local dir = $(1) ;

	MkDir $(dir) ;

	# This was pain-in-the-ass to set up (bad docs)
	# but this is the shortest possible explaination of it:
	# files must be gristed (or foo/foo will not be build) and _after_
	# that apply SEARCH on it, consulting SUBDIR. Otherwise
	# known targets will be compiled, but unknown (icons etc.) will not
	# be recognized as installable entity.
	s = [ FGristFiles $(2) ] ;
	SEARCH on $(s) = $(SUBDIR) ;

	for i in $(s) {
		t = $(i:BSR=$(dir):G=installed) ;
		LocalDepends $(t) : $(i) ;
		LocalDepends $(t) : $(dir) ;

		LocalDepends install : $(t) ;
		LocalClean uninstall : $(t) ;

		Install1 $(t) : $(i) ;

		if $(3) {
			MODE on $(t) = $(3) ;
			Chmod $(t) ;
		}

		if $(4) {
			OWNER on $(t) = $(4) ;
			Chown $(t) ;
		}

		if $(5) {
			GROUP on $(t) = $(5) ;
			Chgrp $(t) ;
		}
	}
}

# InstallStaticLibrary <location-dir> : <library> ;
rule InstallStaticLibrary
{
	MakeInstallPrivate $(<) : $(>:S=$(SUFLIB)) : $(FILEMODE) ;
}

# InstallSharedLibrary <location-dir> : <library> ;
rule InstallSharedLibrary
{	
	local i t s ;
	local dir = $(1) ;

	MkDir $(dir) ;

	s = [ FGristFiles $(2:S=$(SUFLIB_SHARED).$(EDELIB_VERSION)) ] ;
	SEARCH on $(s) = $(SUBDIR) ;

	for i in $(s) {
		t = $(i:BSR=$(dir):G=installed) ;
		LocalDepends $(t) : $(i) ;
		LocalDepends $(t) : $(dir) ;

		LocalDepends install : $(t) ;
		UninstallSharedLibrary1 uninstall : $(t) ;

		InstallSharedLibrary1 $(t) : $(i) ;
	}

	# install .la file
	MakeInstallPrivate $(dir) : $(2:S=$(SUFLA_SHARED)) ;
}

actions InstallSharedLibrary1
{
	$(CP) "$(>)" "$(<)" ;
}

actions piecemeal together existing UninstallSharedLibrary1
{
	$(RM) "$(>)" ;
}

# InstallProgram <location-dir> : <program> ;
# EXEMODE is not used (jam set it to 711)
rule InstallProgram
{
	MakeInstallPrivate $(<) : $(>) ;
}

# InstallDocumentation <location-dir> : <file> ;
rule InstallDocumentation
{
	MakeInstallPrivate $(<) : $(>) : $(FILEMODE) ;
}

# InstallFile <location-dir> : <file> ;
rule InstallFile
{
	MakeInstallPrivate $(<) : $(>) : $(FILEMODE) ;
}

# InstallDirectory <location-dir> : <directory> ;
rule InstallDirectory
{
	local dir = $(1) ;

	MkDir $(dir) ;

	s = [ FGristFiles $(2) ] ;
	SEARCH on $(s) = $(SUBDIR) ;

	for i in $(s) {
		t = $(i:BSR=$(dir):G=installed) ;
		LocalDepends $(t) : $(i) ;
		LocalDepends $(t) : $(dir) ;

		LocalDepends install : $(t) ;
		Cleandir uninstall : $(t) ;

		CP on $(t) = $(COPYDIR) ;
		Install1 $(t) : $(i) ;
	}
}

actions Install1
{
	$(CP) "$(>)" "$(<)"
}

actions SymLink1 
{
	$(RM) "$(<)" && $(LINKCMD) "$(>:D=)" "$(<)"
}

actions GenLa
{
	today=`date`

	cat > "$(<)" <<EOF
# $(<:D=) - a libtool library file
# Generated by 'edelib jam build' on: $today

# The name that we can dlopen(3).
dlname='$(DLNAME1)'

# Names of this library.
library_names='$(DLNAME2) $(DLNAME1)'

# The name of the static archive.
old_library=''

# Libraries that this one depends upon.
dependency_libs=''

# Is this already installed library.
installed=yes

# Files to dlopen/dlpreopen.
dlopen=''
dlpreopen=''

# Directory that this library needs to be installed in:
libdir='$(libdir)'
EOF
}

NotFile install ;

# a generated junk
LocalClean distclean : 
	$(TOP)/configure 
	$(TOP)/aclocal.m4 
	$(TOP)/Jamconfig 
	$(TOP)/edelib-config
	$(TOP)/edelib.pc
	$(TOP)/edelib-dbus.pc
	$(TOP)/config.log 
	$(TOP)/config.status 
	$(TOP)/edelib/_conf.h.in 
	$(TOP)/edelib/_conf.h 
	$(TOP)/edelib/Version.h 
	$(JCACHEFILE)
	$(HCACHEFILE) ;

Cleandir distclean : $(TOP)/autom4te.cache ;
