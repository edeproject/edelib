#
# $Id$
#
# Part of edelib.
# Copyright (c) 2005-2007 EDE Authors.
#
# This program is licenced under terms of the 
# GNU General Public Licence version 2 or newer.
# See COPYING for details.

# tools
DOXYGEN = doxygen ;
DIRNAME = dirname ;
LINKCMD = ln -s ;
SED     = sed ;
AWK     = awk ;

# flags
FLAGS = -Wall -g3 -D_DEBUG -I$(TOP) ;
STDLIB = stdc++ ;
# clear flag, so we can set it elsewhere
OPTIM = ;

# extensions
SOEXT = .so ;
SOEXTFULL = $(SOEXT).2.0.1 ;
SOFLAGS = -fPIC ;

# directories
INCLUDEDIR = edelib ;
LIBDIR = lib ;

# library names
EDELIB = edelib ;
EDELIB_NAME = libedelib ;

JUNK = "> /dev/null" ;

if $(SHARED)
{
	FLAGS += $(SOFLAGS) ;
	SUFLIB = $(SOEXTFULL) ;
}

# this is used by jam
CCFLAGS = $(FLAGS) $(LOCALFLAGS) ;
C++FLAGS = $(FLAGS) $(LOCALFLAGS) ;

# creates symlink
rule SymLink
{
	if $(LINKCMD)
	{
		DEPENDS $(<) : $(>) ;
		DEPENDS all : $(<) ;
		SymLink1 $(<) : $(>) ;
		Clean clean : $(<) ;
	}
}

actions SymLink1
{
	$(LINKCMD) $(>) $(<) ;
}

# create either static of dynamic library
rule MakeLibrary
{
	if $(SHARED)
	{
		if ! $(UNIX)
		{
			Exit "Dynamic libraries can't be built on this OS for now" ;
		}

		# NOT FINISHED !

		local target tlink ;
		target = $(<)$(SOEXTFULL) ;
		tlink  = $(<)$(SOEXT) ;

		LINKFLAGS on $(target) = -shared -Wl,-soname,$(<:D=)$(SOEXTFULL) -l$(STDLIB) ;

		# clean default values so
		# we don't get strange output
		SUFEXE = ;
		LOCATE_TARGET on $(target) = ;

		Main $(target) : $(>) ;
		SymLink $(tlink) : $(target) ;

		DEPENDS lib : $(tlink) ;
	}
	else
	{
		# call builtin one
		Library $(<) : $(>) ;
	}
}

rule MakeTest
{
	local elib = [ FDirName $(TOP) $(LIBDIR) $(EDELIB_NAME)$(SUFLIB) ] ;
	local ldir = [ FDirName $(TOP) $(LIBDIR) ] ;
	DEPENDS $(<) : $(elib) ;

	LINKLIBS on $(<) = -L$(ldir) -l$(EDELIB) -l$(STDLIB) ;
	Main $(<) : $(>) ;
}

rule MakeDocumentation
{

	# just return if doxygen is not found
	# so we can build the rest
	if ! $(DOXYGEN)
	{
		Echo "doxygen is missing" ;
		Echo "To make documentation, you will need to install it" ;
		return ;
	}

	# dirname is used to compute path
	# since doxygen command must be run where Doxyfile exists
	if ! $(DIRNAME)
	{
		Echo "dirname is missing" ;
		Echo "To make documentation, go to $(<:P) and run doxygen" ;
		return ;
	}

	DEPENDS doc : $(<) ;
	DEPENDS $(<) : $(>) ;
	DEPENDS all : doc ;

	Cleandir clean : $(<) ;
}

actions piecemeal MakeDocumentation
{
	dn=`$(DIRNAME) $(>)`
	cd $dn
	$(DOXYGEN) $(>:B) $(JUNK) ;
}

actions piecemeal Package
{
	nm=`cat $(TOP)/edelib/Version.h | $(SED) -ne '/EDELIB_VERSION/p' | $(AWK) '{print $3}' | $(SED) -e 's/"//g'`
	tar -czpvf edelib-$nm.tar.gz $(TOP)/../edelib
}
Package archive ;

# allow to be used as Cleandir cleandir
actions piecemeal together existing Cleandir
{
	$(RM) -R $(>)
}

actions quietly Help
{
	echo ""
	echo "Options:"
	echo "	 jam				build all"
	echo "	 jam lib			make library only"
	echo "	 jam doc			create documentation"
	echo "	 jam clean			clean compiled data"
	echo "	 jam help			you already see it"
	echo ""
}
Help help ;


NOTFILE doc help archive ;
ALWAYS	doc help archive ;

#Cleandir distclean : autom4te.cache ;
#Clean distclean : config.h config.log config.status configure ;
